<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[提权学习(一) 提权基础及相关的问题的解决]]></title>
      <url>/2017/08/13/%E6%8F%90%E6%9D%83%E5%AD%A6%E4%B9%A0(%E4%B8%80)%20%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="0x01-Windows-常规命令-提权常用"><a href="#0x01-Windows-常规命令-提权常用" class="headerlink" title="0x01 Windows 常规命令(提权常用)"></a>0x01 Windows 常规命令(提权常用)</h4><h5 id="1-查看-IP-地址配置信息"><a href="#1-查看-IP-地址配置信息" class="headerlink" title="1 查看 IP 地址配置信息"></a>1 查看 IP 地址配置信息</h5><pre><code>ipconfig
</code></pre><h5 id="2-用户操作命令-net-user"><a href="#2-用户操作命令-net-user" class="headerlink" title="2 用户操作命令(net user)"></a>2 用户操作命令(net user)</h5><ul>
<li><p><strong>1 添加用户并设置密码</strong></p>
<pre><code>net user 用户名 用户密码 /add
</code></pre></li>
<li><p><strong>2 删除用户</strong></p>
<pre><code>net user 用户 /del
</code></pre></li>
<li><p><strong>3 添加用户到管理员组</strong></p>
<pre><code>net localgroup administrators 用户 /add
</code></pre></li>
</ul>
<h5 id="3-网络连接情况命令-netstat"><a href="#3-网络连接情况命令-netstat" class="headerlink" title="3 网络连接情况命令(netstat)"></a>3 网络连接情况命令(netstat)</h5><ul>
<li><p><strong>查看网络连接端口等信息</strong></p>
<pre><code>netstat -ano
</code></pre></li>
</ul>
<h5 id="4-查看当前计算机进程"><a href="#4-查看当前计算机进程" class="headerlink" title="4 查看当前计算机进程"></a>4 查看当前计算机进程</h5><pre><code>tasklist /svc
</code></pre><h5 id="5-查看当前计算机开启服务名称"><a href="#5-查看当前计算机开启服务名称" class="headerlink" title="5 查看当前计算机开启服务名称"></a>5 查看当前计算机开启服务名称</h5><pre><code>net start
</code></pre><h5 id="6-查看计算机信息以及补丁情况"><a href="#6-查看计算机信息以及补丁情况" class="headerlink" title="6 查看计算机信息以及补丁情况"></a>6 查看计算机信息以及补丁情况</h5><pre><code>systeminfo
</code></pre><h5 id="7-查看当前用户权限"><a href="#7-查看当前用户权限" class="headerlink" title="7 查看当前用户权限"></a>7 查看当前用户权限</h5><pre><code>whoami
</code></pre><h5 id="8-查看当前计算机操作系统版本"><a href="#8-查看当前计算机操作系统版本" class="headerlink" title="8 查看当前计算机操作系统版本"></a>8 查看当前计算机操作系统版本</h5><pre><code>ver
</code></pre><h4 id="0x02-提权中遇到的问题："><a href="#0x02-提权中遇到的问题：" class="headerlink" title="0x02 提权中遇到的问题："></a>0x02 提权中遇到的问题：</h4><h5 id="1-cmd无法执行"><a href="#1-cmd无法执行" class="headerlink" title="1.cmd无法执行"></a>1.cmd无法执行</h5><p><strong>原因：(cmd被降权、cmd被删除、组件被删除、防护软件拦截)</strong></p>
<ul>
<li><strong>1 cmd被降权、cmd被删除</strong></li>
</ul>
<p><img src="http://oujzxyfkr.bkt.clouddn.com/%E6%8F%90%E6%9D%831.png" alt="1"></p>
<p><strong>解决方法：</strong></p>
<pre><code>寻找可读可写目录，重新上传cmd，并调用此cmd执行(cmd被降权、cmd被删除)
注意：尽量不选择带空格的目录
</code></pre><ul>
<li><strong>2 组件被删除</strong></li>
</ul>
<p><img src="http://oujzxyfkr.bkt.clouddn.com/yzczzh06%E6%8F%90%E6%9D%832.png" alt="2"></p>
<p><strong>解决方法：</strong></p>
<pre><code>换用其他组件
</code></pre><h5 id="2-用户无法添加-在权限已经足够添加用户的条件下"><a href="#2-用户无法添加-在权限已经足够添加用户的条件下" class="headerlink" title="2.用户无法添加(在权限已经足够添加用户的条件下)"></a>2.用户无法添加(在权限已经足够添加用户的条件下)</h5><p><strong>原因：net被删除、防护软件拦截</strong></p>
<p><strong>解决方法：</strong></p>
<pre><code>寻找可读可写目录，重新上传net.exe，并调用此net.exe(net被删除)
</code></pre><h5 id="3-3389无法连接"><a href="#3-3389无法连接" class="headerlink" title="3.3389无法连接"></a>3.3389无法连接</h5><p><strong>原因：</strong></p>
<p><strong>(1) 远程访问的服务端口设置的不是3389</strong></p>
<p><strong>解决方法：</strong></p>
<ul>
<li><p><strong>1 PID 查询法</strong></p>
<pre><code>1&apos; 先执行 `tasklist /svc` 命令查看计算机服务进程以及对应的 PID 号(远程访问服务的名称：TermService)

2&apos; 之后执行 `netstat -ano` 查找 PID 对应的端口信息即为被修改过得远程访问服务端口
</code></pre></li>
<li><p><strong>2 注册表读取法</strong></p>
<pre><code>在 WebShell 中有可以直接读取对应端口注册表的选项
</code></pre></li>
<li><p><strong>3 端口扫描法</strong></p>
</li>
</ul>
<p><strong>(2) 远程访问的服务没有开启</strong></p>
<p><strong>解决方法：</strong></p>
<pre><code>尝试打开 3389 端口，开启服务(必须是管理员权限)(有工具可以打开)
</code></pre><p><strong>(3) 内网环境</strong></p>
<p><strong>解决方法：需要用到端口转发，需要准备一台外网服务器以及端口转发工具，外网不能访问内网，但是内网可以访问外网，所以思路就是：让内网将自己3389端口(可能被修改过)的流量转发至外网的一个端口</strong></p>
<p><strong>内网服务器</strong></p>
<pre><code>lcx.exe -slave `外网服务器IP` `端口号1` `内网服务器IP` `远程访问服务的端口号`
</code></pre><p><strong>该命令是指将内网服务器3389端口(可能被修改过)流量转发至外网服务器的指定端口号1端口</strong></p>
<p><strong>外网服务器</strong></p>
<pre><code>lcx.exe -listen `端口号1` `端口号2`
</code></pre><p><strong>该命令是指监听本机的端口号1的流量并将该流量转发至端口号2端口</strong></p>
<p><strong>这样主要在本机连接本地的端口号2端口，就相当于访问了内网服务器的3389端口</strong></p>
<p><strong>(4) 防护软件拦截 </strong></p>
<h4 id="0x03-在菜刀中提权"><a href="#0x03-在菜刀中提权" class="headerlink" title="0x03 在菜刀中提权"></a>0x03 在菜刀中提权</h4><p><strong>如果使用菜刀提权，而目标机器又限制了cmd的命令执行，这时需要寻找可能的可读写目录，上传自己的cmd，之后再虚拟终端执行以下命令修改设置终端路径</strong></p>
<pre><code>setp 上传的 cmd 的路径
</code></pre><h4 id="0x04-注意事项"><a href="#0x04-注意事项" class="headerlink" title="0x04 注意事项"></a>0x04 注意事项</h4><p><strong>(1) 提权可以使用不同的平台进行，如：菜刀、aspx大马</strong></p>
<p><strong>(2) 不同的脚本权限不一样</strong></p>
<pre><code>jsp &gt; aspx &gt; php | asp
</code></pre><p><strong>(3) 在 aspx 脚本中，如果提权不成功，可试着尝试将 <code>cmd 路径</code>换成 <code>exp 路径</code>，将 <code>exp 路径</code> + <code>命令</code>换成 <code>空格</code> + <code>命令</code></strong></p>
]]></content>
      
        <categories>
            
            <category> 提权 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 提权基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 命令行操作的介绍]]></title>
      <url>/2017/08/05/git%20%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h3><h4 id="0x01-Git-的介绍"><a href="#0x01-Git-的介绍" class="headerlink" title="0x01 Git 的介绍"></a>0x01 Git 的介绍</h4><p><strong>Git 是 Linux 的创始人 Linus Torvalds 开源的一款分布式版本控制系统，以帮助开发者更好的对项目进行版本管理。每一个优秀的开发者在进行项目开发时都会第一时间给自己的项目加上 Git，以便能更好的追踪代码修改，进行版本回溯等操作。在多人协作的开发过程中，Git 更是必不可少的。因此，本书中将使用 Git 来管理项目的所有代码，让你在阅读本书的时候能够体会到 Git 的强大，了解实际开发中我们对 Git 的应用。</strong></p>
<p><strong>在现代化的项目开发中，Git 基本上是标配。</strong></p>
<h4 id="0x02-Git-命令的介绍"><a href="#0x02-Git-命令的介绍" class="headerlink" title="0x02 Git 命令的介绍"></a>0x02 Git 命令的介绍</h4><h5 id="1-Git-的基本设置"><a href="#1-Git-的基本设置" class="headerlink" title="1.Git 的基本设置"></a>1.Git 的基本设置</h5><pre><code>git config --global user.name &quot;Your name&quot;
git config --global user.email you@example.com
</code></pre><p><strong>–global 是对 Git 进行全局设置</strong></p>
<p><strong>该命令是对 Git 进行用户名和邮箱的设置，该设置可以在你提交代码时自动署名标记，方便查看提交日志是区分作者。</strong></p>
<h5 id="2-Git-推送分支设置"><a href="#2-Git-推送分支设置" class="headerlink" title="2.Git 推送分支设置"></a>2.Git 推送分支设置</h5><pre><code>git config --global push.default simple
</code></pre><p><strong>此命令的作用是：当我们执行 <code>git push</code> 命令，但是没有指定分支时，会自动使用当前分支，而不是报错</strong></p>
<h5 id="3-Git-初始化"><a href="#3-Git-初始化" class="headerlink" title="3.Git 初始化"></a>3.Git 初始化</h5><pre><code>git init
</code></pre><h5 id="4-添加版本管理"><a href="#4-添加版本管理" class="headerlink" title="4.添加版本管理"></a>4.添加版本管理</h5><pre><code>git add -A
</code></pre><p><strong>可以通过在 <code>.gitignore</code> 文件中进行设置，来忽略掉一些我们不想纳入到 Git 版本管理中的文件(如缓存文件) 因此上面描述的『所有文件』指的是没在 <code>.gitignore</code> 中被忽略的文件。</strong></p>
<h5 id="5-检查-Git-状态"><a href="#5-检查-Git-状态" class="headerlink" title="5.检查 Git 状态"></a>5.检查 Git 状态</h5><pre><code>git status
</code></pre><p><strong>该命令会向你输出存放在 Git 暂存区中的文件，这意味着这些文件并没有真正提交到 Git 中。</strong></p>
<h5 id="6-保留改动并提交"><a href="#6-保留改动并提交" class="headerlink" title="6.保留改动并提交"></a>6.保留改动并提交</h5><pre><code>git commit -m &quot;Initial commit&quot;
</code></pre><p><strong>该命令会将暂存区的文件都提交到 Git，<code>-m</code> 选项后面带的参数表示本次提交的简单描述。</strong></p>
<h5 id="7-查看历史提交记录"><a href="#7-查看历史提交记录" class="headerlink" title="7.查看历史提交记录"></a>7.查看历史提交记录</h5><pre><code>git log
</code></pre><p><strong>从输出信息中可以很清晰的看到每次提交的作者、日期、描述等信息。注意看这里的 <code>Author</code> 项的内容就是我们上面设置的用户信息。 按 <code>q</code> 可退出查看。</strong></p>
<h5 id="8-恢复被删除文件"><a href="#8-恢复被删除文件" class="headerlink" title="8.恢复被删除文件"></a>8.恢复被删除文件</h5><pre><code>git checkout -f
</code></pre><p>该命令的作用是将在暂存区里更改的文件进行强制撤销</p>
<h5 id="9-新建分支"><a href="#9-新建分支" class="headerlink" title="9.新建分支"></a>9.新建分支</h5><p><strong>(1)新建 static-pages 分支</strong></p>
<pre><code>git checkout master
git checkout -b static-pages
</code></pre><p><strong>上面的第一条命令 git checkout master 代表将当前分支切换到 master 分支上，master 分支是我们初始化 Git 时默认创建的主分支，其它分支都是基于主分支衍生出来的。</strong></p>
<p><strong>第二条命令 git checkout -b static-pages 将会为你创建一个名为 static-pages 的新分支。-b 选项表示创建指定名称的新分支。</strong></p>
<p><strong>你可以将新建的 static-pages 理解为是对 master 分支的克隆，在上面做的所有修改都不会影响到 master 分支。本节后面会将 static-pages 分支合并到 master 分支上，合并成功之后，在 static-pages 分支上做的所有改动都会并入到 master 分支。另外，你也可以选择对一个分支进行删除操作，当一个分支被删除之后，在该分支之上的所有改动也都将被销毁，删除分支的操作不会影响到 master 分支。这便是 Git 工作流的强大之处。</strong></p>
<p><strong>(2)合并分支</strong></p>
<pre><code>git merge fake-branch
</code></pre><p><strong>(3)删除分支</strong></p>
<pre><code>git branch -d fake-branch
</code></pre><h5 id="10-代码推送"><a href="#10-代码推送" class="headerlink" title="10.代码推送"></a>10.代码推送</h5><p><strong>(1)推送到 GitHub 上</strong></p>
<pre><code>git remote add origin git@github.com:your_username/hello_laravel.git
git push origin master
</code></pre><p><strong>第一条命令的意思是：在我们的 GitHub 本地仓库添加一个远程仓库，<code>git@github.com:your_username/hello_laravel.git</code> 是本地仓库的地址，使用ssh的方式连接。</strong></p>
<p><strong>第二条命令的意思是：将本地master分支跟踪到远程分支，即将我们的代码推送到 GitHub 本地仓库中。</strong></p>
<p><strong>这是第一次将代码推送到 GitHub上需要做的工作，因为需要建立远程仓库，之后我们对代码进行修改之后再一次推送只需要执行下列命令即可</strong></p>
<pre><code>git add -A
git commit -m &quot;describe&quot;
git push
</code></pre><p><strong>(2)推动到 Heroku 上</strong></p>
<pre><code>git push heroku master
</code></pre><p><strong><em>注：这只是在学习中总结的部分命令，在之后的学习中如果再遇到相关命令会继续补充</em></strong></p>
]]></content>
      
        <categories>
            
            <category> Laravel 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel Artisan 命令行操作的介绍]]></title>
      <url>/2017/08/05/Laravel%20Artisan/</url>
      <content type="html"><![CDATA[<h3 id="Laravel-Artisan-命令"><a href="#Laravel-Artisan-命令" class="headerlink" title="Laravel Artisan 命令"></a>Laravel Artisan 命令</h3><h4 id="0x01-Artisan-介绍"><a href="#0x01-Artisan-介绍" class="headerlink" title="0x01 Artisan 介绍"></a>0x01 Artisan 介绍</h4><p><strong>Artisan 是 Laravel 提供的 CLI(命令行接口)，它提供了非常多使用的命令来帮助我们开发 Laravel 应用</strong></p>
<h4 id="0x02-Artisan-命令介绍"><a href="#0x02-Artisan-命令介绍" class="headerlink" title="0x02 Artisan 命令介绍"></a>0x02 Artisan 命令介绍</h4><p><strong>1.生成App Key</strong></p>
<pre><code>php artisan key:generate
</code></pre><p><strong>2.生成控制器</strong></p>
<pre><code>php artisan make:controller
</code></pre><p><strong>3.生成模型</strong></p>
<pre><code>php artisan make:model
</code></pre><p><strong>4.生成授权策略</strong></p>
<pre><code>php artisan make:policy
</code></pre><p><strong>5.生成seeder文件</strong></p>
<pre><code>php artisan make:seeder
</code></pre><p><strong>6.执行迁移</strong></p>
<pre><code>php artisan migrate
</code></pre><p><strong>7.回滚迁移</strong></p>
<pre><code>php artisan migrate:rollback
</code></pre><p><strong>8.重置数据库</strong></p>
<pre><code>php artisan migrate:refresh
</code></pre><p><strong>9.填充数据库</strong></p>
<pre><code>php artisan db:seed
</code></pre><p><strong>10.进入tinker环境</strong></p>
<pre><code>php artisan tinker
</code></pre><p><strong>11.查看路由列表</strong></p>
<pre><code>php artisan route:list
</code></pre><p><strong>12.使用 <code>help</code> 来查看各个 Artisan 命令的帮助界面</strong></p>
<pre><code>php artisan help xxx
</code></pre><p><strong><em>注：由于还在学习，只是总结了一些基础的命令，在今后的学习中要是再遇到相关的命令还会继续的学习</em></strong></p>
]]></content>
      
        <categories>
            
            <category> Laravel 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Artisan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Heroku 命令行操作的介绍]]></title>
      <url>/2017/08/05/heroku/</url>
      <content type="html"><![CDATA[<h3 id="Heroku-命令"><a href="#Heroku-命令" class="headerlink" title="Heroku 命令"></a>Heroku 命令</h3><h4 id="0x01-Heorku-介绍"><a href="#0x01-Heorku-介绍" class="headerlink" title="0x01 Heorku 介绍"></a>0x01 Heorku 介绍</h4><p><strong>最近在学习 Laravel 相关的开发知识，当然知识简单的涉及一点，前端什么的还真是不怎么了解，但是还是想熟悉一下开发的整体流程，大致的学习一下，在接触的过程中发现基础的代码部署全部都是由命令行进行操作的，其中就包括 <code>Heroku</code> 的命令号操作。那么 <code>Heroku</code> 又是什么呢？</strong></p>
<p><strong>Heroku 是一个支持多种语言的云平台。Heroku 作为最开始的云平台之一，从 2007 年 6 月起开始开发，当时它仅支持 Ruby，后来增加了对 Java、Node.js、Scala、Clojure、Python 以及 PHP 和 Perl 的支持。由于其应用部署流程异常简单，因此倍受广大开发者欢迎。</strong></p>
<p><strong>在开发过程中，可以使用 Heroku 方便地进行项目的云部署。</strong></p>
<h4 id="0x02-Heroku-命令介绍"><a href="#0x02-Heroku-命令介绍" class="headerlink" title="0x02 Heroku 命令介绍"></a>0x02 Heroku 命令介绍</h4><h5 id="1-登录命令"><a href="#1-登录命令" class="headerlink" title="1.登录命令"></a>1.登录命令</h5><p><strong>(1)登录 Heroku 账号</strong></p>
<pre><code>heroku login
</code></pre><p><strong>(2)添加 SSH Key 到 Heroku 上</strong></p>
<pre><code>heroku keys:add
</code></pre><h5 id="2-上线命令"><a href="#2-上线命令" class="headerlink" title="2.上线命令"></a>2.上线命令</h5><p><strong>(1)创建一个 Heroku App</strong></p>
<pre><code>heroku create
</code></pre><p><strong>(2)配置 <code>Procfile</code> 文件</strong></p>
<p><strong>通过配置 <code>Procfile</code> 文件来告诉 Heroku 应当使用什么命令来启动 Web 服务器。接着还需要将该文件纳入到 Git 版本控制中</strong></p>
<pre><code>echo web: vendor/bin/heoku-php-apache2 public/ &gt; Procfile
git add -A
git commit -m &quot;Procfile for Heroku&quot;
git push
heroku buildpacks:set hero/php
</code></pre><p><strong>(3)生成 App Key</strong></p>
<pre><code>php artisan key:generate
</code></pre><p><strong>将生成的 App Key 替换掉下面命令的 <your_app_key> 并运行命令</your_app_key></strong></p>
<pre><code>heroku config:set APP_KEY=&lt;your_app_key&gt;
</code></pre><p><strong>(4)配置基本完成，将代码推送到 Heroku 上</strong></p>
<pre><code>git push heroku master
</code></pre><p><strong>(5)推送成功后，快速打开线上应用</strong></p>
<pre><code>heroku open   
</code></pre><h5 id="3-出现了问题"><a href="#3-出现了问题" class="headerlink" title="3.出现了问题"></a>3.出现了问题</h5><p><strong>在使用 Heroku 的过程中如果出现了问题，则可以使用下面命令来输出生产环境上的日志进行排错</strong></p>
<pre><code>heroku logs
</code></pre><p><strong><em>注：这些只是我总结的部分命令，在之后的学习当中如果遇到有关 Heroku 的命令行操作会进行及时的补充</em></strong></p>
]]></content>
      
        <categories>
            
            <category> Laravel 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Heroku </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好用的Shell--ZSH]]></title>
      <url>/2017/07/29/zsh/</url>
      <content type="html"><![CDATA[<h3 id="ZSH的安装与配置"><a href="#ZSH的安装与配置" class="headerlink" title="ZSH的安装与配置"></a>ZSH的安装与配置</h3><h4 id="1-Shell的介绍"><a href="#1-Shell的介绍" class="headerlink" title="1.Shell的介绍"></a>1.Shell的介绍</h4><p><strong>在Mac或者Linux系统中最不可或缺的应该就是命令行了，而使用命令行当然就离不开shell了，那么shell是什么呢？</strong></p>
<p><strong>shell是Linux/Unxi的一个外壳，shell负责与内核进行交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核再进行命令的处理和执行，处理执行完后再将结果返回给用户或应用程序</strong></p>
<p><strong>Linux/Unxi提供多种shell，如bash、csh、sh、zsh等，如果想要查看你的系统中有多少种shell，执行如下命令：</strong></p>
<pre><code>cat /etc/shells
</code></pre><p><img src="http://oujzxyfkr.bkt.clouddn.com/yzczzh02zsh1.png" alt="1"></p>
<h4 id="2-ZSH的安装"><a href="#2-ZSH的安装" class="headerlink" title="2.ZSH的安装"></a>2.ZSH的安装</h4><p><strong>zsh也是shell的一种，Linux和Mac不同的地方在于：Mac下预装了zsh，而Linux/Unxi下并没有需要自行安装，所以如果你是Mac用户，那么你的zsh就不需要安装了，如果你是Linux或Unxi用户就需要先行安装zsh，具体操作如下：</strong></p>
<p><strong>Redhat Linux用户执行</strong></p>
<pre><code>sudo yum install zsh
</code></pre><p><strong>Ubuntu Linux用户执行</strong></p>
<pre><code>sudo apt-get install zsh
</code></pre><p><strong>安装完之后，我们还需要将zsh设置成我们默认的shell，以代替原来使用的shell，之后在终端执行如下命令</strong></p>
<pre><code>chsh -s /bin/zsh
</code></pre><p><strong><em>注:这一步主要看zsh的路径，如果路径不是’/bin/zsh’而是’/usr/local/bin/zsh’，在执行命令是路径就要改变</em></strong></p>
<h4 id="3-oh-my-zsh的安装"><a href="#3-oh-my-zsh的安装" class="headerlink" title="3.oh-my-zsh的安装"></a>3.oh-my-zsh的安装</h4><p><strong>zsh之所以现在被大众接受是因为zsh可配置性强，用户可以自定义配置，个性化强，而且zsh有着极其强大的tab不全功能；但是在zsh初期却很少有人愿意使用它，因为zsh的配置相当复杂使许多人望而却步。</strong></p>
<p><strong>但是国外有一位大牛写出了一个项目使得Zsh的配置变得很简单只需要几步就可以完成，这个项目就是“oh-my-zsh”</strong></p>
<p><strong>接下来安装oh-my-zsh，oh-my-zsh可以自动安装或者手动安装</strong></p>
<p><strong>自动安装</strong></p>
<pre><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
</code></pre><p><strong>手动安装</strong></p>
<pre><code>git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre><p><strong>这样oh-my-zsh就算安装完成了，现在在打开终端，你的shell就变成了zsh的天下了～</strong></p>
<p><strong>zsh的配置几乎全在~/.zshrc文件下,如果想对shell进行进一步的配置或进行美化就都需要在~/.zshrc文件下进行了</strong></p>
<p><strong>oh-my-zsh社区非常的完善，有200+的插件，140+的主题，你可以在社区中找到你需要的插件和你喜爱的主题，当然如果你需要的插件主题社区中并没有你也可以自己试着去写一些，将zsh配置修改成自己喜欢的样子。一款优秀的项目，其优秀之处就在于他功能是强大的、可扩展的。这样配置过后，没给人的zsh可能都不一样，没给人都能找到最适合自己的shell～</strong></p>
<h3 id="ZSH的使用"><a href="#ZSH的使用" class="headerlink" title="ZSH的使用"></a>ZSH的使用</h3><p><strong>1、兼容 bash，原来使用bash的，现在可以无压力使用zsh</strong></p>
<p><strong>2、强大的历史纪录功能，输入 grep 然后用上下箭头可以翻阅你执行的所有 grep 命令。</strong></p>
<p><strong>3、智能拼写纠正</strong></p>
<p><strong>4、补全功能强大：路径补全、命令补全，命令参数补全，插件内容补全等等。</strong></p>
<p><strong>5、智能跳转，安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全。j –stat 可以看你的历史路径库。</strong></p>
<p><strong>6、目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</strong></p>
<p><strong>7、在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。</strong></p>
<p><strong>8、通配符搜索</strong></p>
<p><strong>9、更强的别名</strong></p>
<p><strong>10、插件支持</strong></p>
<p><strong><em>注：有些使用的优点不太会描述就借鉴了一些牛人的文章，具体的使用优点可以看下链接:<a href="https://zhuanlan.zhihu.com/p/19556676?columnSlug=mactalk" target="_blank" rel="external">终极 Shell——ZSH</a></em></strong></p>
<h3 id="ZSH的插件"><a href="#ZSH的插件" class="headerlink" title="ZSH的插件"></a>ZSH的插件</h3><p><strong>zsh下载插件时需要注意的一点是：下载好插件后一定要在~/.zshrc文件中进行配置，要将插件的名字填写套配置文件的plugins选项中</strong></p>
<p><img src="http://oujzxyfkr.bkt.clouddn.com/yzczzh02zsh2.png" alt="2"></p>
<p><strong>主要介绍一款插件：autojump，此插件使得zsh的功能更加强大，它会在你每次启动命令时记录你当前位置，并把它添加进它自身的数据库中。这样，某些目录比其它一些目录添加的次数多，这些目录一般就代表你最重要的目录，而它们的“权重”也会增大</strong></p>
<p><strong>下面介绍如何下载autojump及其配置：</strong></p>
<p><strong>1.如果你是Mac用户，使用homebrew下载安装autojump</strong></p>
<pre><code>brew install autojump
</code></pre><p><strong>2.如果你是Linux用户，下载autojump</strong></p>
<pre><code>wget https://github.com/downloads/joelthelion/autojump/autojump_v21.1.2.tar.gz
</code></pre><p><strong>下载完后解压缩，解压缩完后，进入目录，执行</strong></p>
<pre><code>./install.sh
</code></pre><p><strong>3.进入.zshrc文件，将下面代码加入</strong></p>
<pre><code>[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh
</code></pre><p><strong>4.执行命令</strong></p>
<pre><code>source ~/.zshrc
</code></pre><h3 id="ZSH的主题"><a href="#ZSH的主题" class="headerlink" title="ZSH的主题"></a>ZSH的主题</h3><p><strong>oh-my-zsh社区提供了非常多的主题供用户进行选择，使用主题也非常的方便，我会在下面附上一个详细的配置主题链接供大家参考</strong></p>
<p><strong><em><a href="https://zhuanlan.zhihu.com/p/26373052" target="_blank" rel="external">mac下oh-my-zsh的配置</a></em></strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>zsh这款shell是我最近自己安装配置完成，并经过了一段时间的时间后，觉得zsh真的强大好用，真心推荐给大家使用。</strong></p>
<p><strong>安装配置zsh、oh-my-zsh以及安装配置插件和主题时我也遇到了很多的问题，最后这些问题也被我一一的解决，并把经验与体会写了下来和大家分享，我觉得当一个问题出现了，你自己去解决时，要注重解决问题的过程，遇到问题多思考，多查找资料，尽量通过自己去解决问题，这才是最重要的～～</strong></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zsh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[yzczzh]]></title>
      <url>/2017/07/28/yzczzh/</url>
      <content type="html"><![CDATA[<p><strong>终于建好了属于自己的博客，感觉很不错，一直想建一个自己的博客记录自己的学习经历和心得体会，由于种种原因一直拖延到现在，终于建立起来了~</strong></p>
<p><strong>博客是使用HEXO + GitHub搭建起来的，搭建起来很方便，选模板和修改模板花了好长时间，但是做出来的效果还是不错的，感觉辛苦没有白费，HEXO + GitHub的命令行操作也非常的方便，创建文档，部署就可以通过很简单的几个命令就可以实现；主题的选择和改进网上也有详细的教程(但是有些主题需要用到的插件中的某些方法node.js已经放弃使用了，这些地方需要注意)</strong></p>
<p><strong>虽然花了很长时间但是也学会了很多，博客搭建起来之后，我也会陆陆续续的更新自己的博客，让博客记录我的学习历程和经验~</strong></p>
<p><strong>下面会附上我在搭建博客时借鉴的文章及查阅的资料，还要感谢<a href="http://www.z1blog.com" target="_blank" rel="external">zil0ng师傅</a>的帮助，他的博客也在我的友链中，大家可以去浏览，谢谢大家，希望大家多多关注，我也会及时努力的更新，让所有人也让自己看到我的进步~</strong></p>
<p><strong><em>1.建站链接</em></strong><br><a href="http://blog.csdn.net/qq_30379689/article/details/52854003" target="_blank" rel="external">Mac下使用Hexo搭建个人博客</a></p>
<p><strong><em>2.主题链接</em></strong></p>
<p><a href="http://blog.csdn.net/chwshuang/article/details/52350463" target="_blank" rel="external">Hexo安装主题</a></p>
<p><a href="https://hexo.io/themes/" target="_blank" rel="external">Themes</a></p>
]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[friends]]></title>
      <url>/friends/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[photo]]></title>
      <url>/photo/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
